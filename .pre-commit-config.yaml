# Pre-commit hooks configuration for balatro-rs
# Enforces code quality and formatting standards before commits
# Run `pre-commit install` to set up the hooks
# Run `pre-commit run --all-files` to run hooks on all files

default_stages: [commit]
default_language_version:
  python: python3

repos:
  # Standard file checks (trailing whitespace, file endings, etc.)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Removes trailing whitespace from all files
      - id: end-of-file-fixer
        name: Fix file endings
        description: Ensures files end with a newline
      - id: check-yaml
        name: Check YAML syntax
        description: Validates YAML file syntax
      - id: check-toml
        name: Check TOML syntax
        description: Validates TOML file syntax (Cargo.toml, etc.)
      - id: check-json
        name: Check JSON syntax
        description: Validates JSON file syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Prevents commits with merge conflict markers
      - id: check-case-conflict
        name: Check for case conflicts
        description: Prevents case-sensitive filename conflicts
      - id: check-added-large-files
        name: Check for large files
        description: Prevents accidentally committing large files
        args: ['--maxkb=500']

  # Rust formatting and linting
  - repo: local
    hooks:
      # Cargo formatting check
      - id: cargo-fmt
        name: Cargo Format Check
        description: Check Rust code formatting with cargo fmt
        entry: cargo
        args: [fmt, --all, --, --check]
        language: system
        files: \.rs$
        pass_filenames: false

      # Cargo clippy linting
      - id: cargo-clippy
        name: Cargo Clippy Lint
        description: Run Clippy linter for Rust code quality
        entry: cargo
        args: [clippy, --all-targets, --all-features, --, -D, warnings]
        language: system
        files: \.rs$
        pass_filenames: false

      # Cargo check compilation
      - id: cargo-check
        name: Cargo Check
        description: Check that Rust code compiles
        entry: cargo
        args: [check, --all-targets, --all-features]
        language: system
        files: \.rs$
        pass_filenames: false

      # Cargo test (fast subset)
      - id: cargo-test-fast
        name: Cargo Test (Fast)
        description: Run fast Rust tests
        entry: bash
        args: [-c, 'cargo test --lib --bins --quiet']
        language: system
        files: \.rs$
        pass_filenames: false

  # Security and dependency checks
  - repo: local
    hooks:
      # Cargo audit for security vulnerabilities
      - id: cargo-audit
        name: Cargo Audit
        description: Check for security vulnerabilities in dependencies
        entry: bash
        args:
          - -c
          - |
            if command -v cargo-audit >/dev/null 2>&1; then
              cargo audit
            else
              echo "cargo-audit not installed, skipping security check"
              echo "Install with: cargo install cargo-audit"
            fi
        language: system
        files: (Cargo\.(toml|lock)|\.rs)$
        pass_filenames: false

      # Cargo deny for license and dependency policy
      - id: cargo-deny
        name: Cargo Deny
        description: Check dependency licenses and policies
        entry: bash
        args:
          - -c
          - |
            if command -v cargo-deny >/dev/null 2>&1; then
              cargo deny check
            else
              echo "cargo-deny not installed, skipping policy check"
              echo "Install with: cargo install cargo-deny"
            fi
        language: system
        files: (Cargo\.(toml|lock)|deny\.toml|\.rs)$
        pass_filenames: false

  # Documentation checks
  - repo: local
    hooks:
      # Check documentation builds
      - id: cargo-doc
        name: Cargo Doc Check
        description: Check that documentation builds without warnings
        entry: cargo
        args: [doc, --all-features, --no-deps]
        language: system
        files: \.rs$
        pass_filenames: false
        stages: [manual]  # Only run manually to avoid slowing down commits

      # Check for missing documentation
      - id: missing-docs-check
        name: Missing Documentation Check
        description: Check for missing documentation on public items
        entry: bash
        args:
          - -c
          - |
            # Only check for missing docs in core library to avoid noise
            if ! cargo rustdoc -p balatro-rs -- -D missing_docs 2>/dev/null; then
              echo "Warning: Some public items are missing documentation"
              echo "Run manually: cargo rustdoc -p balatro-rs -- -D missing_docs"
              # Don't fail the commit, just warn
            fi
        language: system
        files: ^core/.*\.rs$
        pass_filenames: false
        stages: [manual]  # Only run manually

# Configuration for manual and CI stages
# Run with: pre-commit run --hook-stage manual <hook-id>
